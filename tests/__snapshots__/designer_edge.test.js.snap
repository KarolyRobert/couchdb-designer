// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`designer_edge success edge test 1`] = `
Array [
  Object {
    "_id": "_design/appdesign",
    "language": "javascript",
    "lib": Object {
      "couchdb": "module.exports.libfunction = function (){
   // https://docs.couchdb.org/en/stable/query-server/javascript.html?highlight=commonJS%20modules#commonjs-modules
}",
    },
    "options": Object {
      "partitioned": true,
    },
    "updates": Object {
      "otherUpdate": "function (doc, req) {
  if (!doc) {
    if ('id' in req && req['id']) {
      // create new document
      return [{
        '_id': req['id']
      }, 'New World'];
    } // change nothing in database


    return [null, 'Empty World'];
  }

  doc['otherhelo'] = 'szia';
  doc['edited_by'] = req['userCtx']['name'];
  return [doc, 'Edited other World!'];
}",
      "testUpdate": "function (doc, req) {
  if (!doc) {
    if ('id' in req && req['id']) {
      // create new document
      return [{
        '_id': req['id']
      }, 'New World'];
    } // change nothing in database


    return [null, 'Empty World'];
  }

  doc['world'] = 'hello';
  doc['edited_by'] = req['userCtx']['name'];
  return [doc, 'Edited World!'];
}",
      "updateFomDir": "function (doc, req) {
  if (!doc) {
    if ('id' in req && req['id']) {
      // create new document
      return [{
        '_id': req['id']
      }, 'New World'];
    } // change nothing in database


    return [null, 'Empty World'];
  }

  doc['fromdir'] = 'szia';
  doc['edited_by'] = req['userCtx']['name'];
  return [doc, 'Edited World from dir'];
}",
    },
    "validate_doc_update": "function (newDoc, oldDoc, userCtx, secObj) {
  if (newDoc._deleted === true) {
    // allow deletes by admins and matching users
    // without checking the other fields
    if (userCtx.roles.indexOf('_admin') !== -1 || userCtx.name == oldDoc.name) {
      return;
    } else {
      throw {
        forbidden: 'Only admins may delete other user docs.'
      };
    }
  }
}",
    "views": Object {
      "byDate": Object {
        "map": "function (doc) {
  if (doc.type === 'post' && doc.tags && Array.isArray(doc.tags)) {
    doc.tags.forEach(function (tag) {
      emit(tag.toLowerCase(), 1);
    });
  }
}",
        "reduce": "function (keys, values, rereduce) {
  if (rereduce) {
    return sum(values);
  } else {
    return values.length;
  }
}",
      },
      "byName": Object {
        "map": "function (doc) {
  if (doc.name) {
    emit(doc.name, 1);
  }
}",
      },
      "byParent": Object {
        "map": "function (doc) {
  const myfuncts = function () {
    emit(doc._id, 1);
  };

  if (doc.parent) {
    myfuncts();
  } else {
    emit('helo', 1);
  }
}",
        "reduce": "function (keys, values, rereduce) {
  if (doc.parent) {}
}",
      },
    },
  },
  Object {
    "_id": "_design/querys",
    "language": "query",
    "views": Object {
      "bar-index": Object {
        "map": Object {
          "fields": Object {
            "bar": "asc",
          },
          "partial_filter_selector": Object {},
        },
        "options": Object {
          "def": Object {
            "fields": Array [
              "bar",
            ],
          },
        },
        "reduce": "_count",
      },
      "foo-index": Object {
        "map": Object {
          "fields": Object {
            "foo": "asc",
          },
          "partial_filter_selector": Object {},
        },
        "options": Object {
          "def": Object {
            "fields": Array [
              "foo",
            ],
          },
        },
        "reduce": "_sum",
      },
    },
  },
]
`;
