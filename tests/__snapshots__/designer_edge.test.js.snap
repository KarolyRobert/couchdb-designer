// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`designer_edge stringifyed 1`] = `
"[
   {
      \\"_id\\": \\"_design/appdesign\\",
      \\"language\\": \\"javascript\\",
      \\"filters\\": {
         \\"all\\": \\"function (doc, req) {\\\\n  return true;\\\\n}\\",
         \\"nothing\\": \\"function (doc, req) {\\\\n  return false;\\\\n}\\"
      },
      \\"lib\\": {
         \\"couchdb\\": \\"function libfunction(){\\\\n   return 'libfunction call updated';\\\\n   // https://docs.couchdb.org/en/stable/query-server/javascript.html?highlight=commonJS%20modules#commonjs-modules\\\\n}\\\\n\\\\nmodule.exports = { libfunction }\\"
      },
      \\"options\\": {
         \\"partitioned\\": true
      },
      \\"updates\\": {
         \\"updateFromDir\\": \\"function (doc, req) {\\\\n  log('log from updateFromDir');\\\\n\\\\n  var probalib = require('lib/couchdb').libfunction;\\\\n\\\\n  doc.updateByUpdateFromDir = probalib();\\\\n  return [doc, req];\\\\n}\\",
         \\"testUpdate\\": \\"function (doc, req) {\\\\n  if (!doc) {\\\\n    if ('id' in req && req['id']) {\\\\n      // create new document\\\\n      return [{\\\\n        '_id': req['id']\\\\n      }, 'New World'];\\\\n    } // change nothing in database\\\\n\\\\n\\\\n    return [null, 'Empty World'];\\\\n  }\\\\n\\\\n  doc['world'] = 'hello';\\\\n  doc['edited_by'] = req['userCtx']['name'];\\\\n  return [doc, 'Edited World!'];\\\\n}\\",
         \\"otherUpdate\\": \\"function (doc, req) {\\\\n  if (!doc) {\\\\n    if ('id' in req && req['id']) {\\\\n      // create new document\\\\n      return [{\\\\n        '_id': req['id']\\\\n      }, 'New World'];\\\\n    } // change nothing in database\\\\n\\\\n\\\\n    return [null, 'Empty World'];\\\\n  }\\\\n\\\\n  doc['otherhelo'] = 'szia';\\\\n  doc['edited_by'] = req['userCtx']['name'];\\\\n  return [doc, 'Edited other World!'];\\\\n}\\"
      },
      \\"validate_doc_update\\": \\"function (newDoc, oldDoc, userCtx, secObj) {\\\\n  if (newDoc._deleted === true) {\\\\n    // allow deletes by admins and matching users\\\\n    // without checking the other fields\\\\n    if (userCtx.roles.indexOf('_admin') !== -1 || userCtx.name == oldDoc.name) {\\\\n      return;\\\\n    } else {\\\\n      throw {\\\\n        forbidden: 'Only admins may delete other user docs.'\\\\n      };\\\\n    }\\\\n  }\\\\n}\\",
      \\"views\\": {
         \\"byBuiltin\\": {
            \\"map\\": \\"function (doc) {\\\\n  var date = new Date(doc.date);\\\\n  emit([date.getFullYear(), date.getMonth(), date.getDay(), date.getHours()], doc.value);\\\\n}\\",
            \\"reduce\\": \\"_sum\\"
         },
         \\"byDate\\": {
            \\"map\\": \\"function (doc) {\\\\n  if (doc.type === 'post' && doc.tags && Array.isArray(doc.tags)) {\\\\n    doc.tags.forEach(function (tag) {\\\\n      emit(tag.toLowerCase(), 1);\\\\n    });\\\\n  }\\\\n}\\",
            \\"reduce\\": \\"function (keys, values, rereduce) {\\\\n  var lib = require('lib/couchdb');\\\\n\\\\n  if (rereduce) {\\\\n    return sum(values);\\\\n  } else {\\\\n    return values.length;\\\\n  }\\\\n}\\"
         },
         \\"byName\\": {
            \\"map\\": \\"function (doc) {\\\\n  log('log from views/byName/map');\\\\n\\\\n  if (doc.name) {\\\\n    emit(doc.name, 1);\\\\n  }\\\\n}\\"
         },
         \\"byParent\\": {
            \\"map\\": \\"function (doc) {\\\\n  log('log from views/byParent/map');\\\\n\\\\n  const myfuncts = function () {\\\\n    emit(doc.parent, 1);\\\\n  };\\\\n\\\\n  if (doc.parent) {\\\\n    myfuncts();\\\\n  } else {\\\\n    emit('helo', 1);\\\\n  }\\\\n}\\",
            \\"reduce\\": \\"function (keys, values, rereduce) {\\\\n  return sum(values);\\\\n}\\"
         },
         \\"byReducer\\": {
            \\"map\\": \\"function (doc) {\\\\n  var date = new Date(doc.date);\\\\n  emit([date.getFullYear(), date.getMonth(), date.getDay(), date.getHours()], doc.value);\\\\n}\\",
            \\"reduce\\": \\"_count\\"
         },
         \\"byTest\\": {
            \\"map\\": \\"function (doc) {\\\\n  var date = new Date(doc.date);\\\\n  emit([date.getFullYear(), date.getMonth(), date.getDay(), date.getHours()], doc.value);\\\\n}\\",
            \\"reduce\\": \\"_sum\\"
         }
      }
   },
   {
      \\"_id\\": \\"_design/errors\\",
      \\"language\\": \\"javascript\\",
      \\"lib\\": {
         \\"false\\": \\"function map(doc){\\\\n    emit(doc._id,false);\\\\n}\\\\n\\\\nmodule.exports = {map}\\"
      },
      \\"updates\\": {},
      \\"views\\": {
         \\"getrow\\": {
            \\"map\\": \\"function (doc) {\\\\n  var row = getRow();\\\\n}\\"
         },
         \\"lib\\": \\"function view(){\\\\n    provides('foo','bar');\\\\n}\\\\n\\\\nmodule.exports = {view} ;\\",
         \\"provides\\": {
            \\"map\\": \\"function (doc) {\\\\n  var lib = require('views/lib');\\\\n\\\\n  lib.view();\\\\n}\\"
         },
         \\"require\\": {
            \\"map\\": \\"function (doc) {\\\\n  var lib = require('lib/false');\\\\n\\\\n  lib.map(doc);\\\\n}\\"
         }
      }
   },
   {
      \\"_id\\": \\"_design/mango\\",
      \\"language\\": \\"query\\",
      \\"views\\": {
         \\"mongo\\": {
            \\"map\\": {
               \\"fields\\": {
                  \\"_id\\": \\"asc\\",
                  \\"_rev\\": \\"asc\\",
                  \\"year\\": \\"asc\\",
                  \\"title\\": \\"asc\\"
               },
               \\"partial_filter_selector\\": {
                  \\"$and\\": [
                     {
                        \\"year\\": {
                           \\"$gt\\": 2010
                        }
                     },
                     {
                        \\"limit\\": {
                           \\"$eq\\": 10
                        }
                     },
                     {
                        \\"skip\\": {
                           \\"$eq\\": 0
                        }
                     }
                  ]
               }
            },
            \\"reduce\\": \\"_count\\",
            \\"options\\": {
               \\"def\\": {
                  \\"partial_filter_selector\\": {
                     \\"year\\": {
                        \\"$gt\\": 2010
                     },
                     \\"limit\\": 10,
                     \\"skip\\": 0
                  },
                  \\"fields\\": [
                     \\"_id\\",
                     {
                        \\"_rev\\": \\"asc\\"
                     },
                     \\"year\\",
                     \\"title\\"
                  ]
               }
            }
         }
      },
      \\"options\\": {
         \\"partitioned\\": false
      }
   },
   {
      \\"_id\\": \\"_design/querys\\",
      \\"language\\": \\"query\\",
      \\"views\\": {
         \\"bar-index\\": {
            \\"map\\": {
               \\"fields\\": {
                  \\"bar\\": \\"asc\\"
               },
               \\"partial_filter_selector\\": {}
            },
            \\"reduce\\": \\"_count\\",
            \\"options\\": {
               \\"def\\": {
                  \\"fields\\": [
                     \\"bar\\"
                  ]
               }
            }
         },
         \\"foo-index\\": {
            \\"map\\": {
               \\"fields\\": {
                  \\"foo\\": \\"asc\\"
               },
               \\"partial_filter_selector\\": {}
            },
            \\"options\\": {
               \\"def\\": {
                  \\"fields\\": [
                     \\"foo\\"
                  ]
               }
            },
            \\"reduce\\": \\"_sum\\"
         }
      }
   }
]"
`;

exports[`designer_edge success edge test 1`] = `
Array [
  Object {
    "_id": "_design/appdesign",
    "filters": Object {
      "all": "function (doc, req) {
  return true;
}",
      "nothing": "function (doc, req) {
  return false;
}",
    },
    "language": "javascript",
    "lib": Object {
      "couchdb": "function libfunction(){
   return 'libfunction call updated';
   // https://docs.couchdb.org/en/stable/query-server/javascript.html?highlight=commonJS%20modules#commonjs-modules
}

module.exports = { libfunction }",
    },
    "options": Object {
      "partitioned": true,
    },
    "updates": Object {
      "otherUpdate": "function (doc, req) {
  if (!doc) {
    if ('id' in req && req['id']) {
      // create new document
      return [{
        '_id': req['id']
      }, 'New World'];
    } // change nothing in database


    return [null, 'Empty World'];
  }

  doc['otherhelo'] = 'szia';
  doc['edited_by'] = req['userCtx']['name'];
  return [doc, 'Edited other World!'];
}",
      "testUpdate": "function (doc, req) {
  if (!doc) {
    if ('id' in req && req['id']) {
      // create new document
      return [{
        '_id': req['id']
      }, 'New World'];
    } // change nothing in database


    return [null, 'Empty World'];
  }

  doc['world'] = 'hello';
  doc['edited_by'] = req['userCtx']['name'];
  return [doc, 'Edited World!'];
}",
      "updateFromDir": "function (doc, req) {
  log('log from updateFromDir');

  var probalib = require('lib/couchdb').libfunction;

  doc.updateByUpdateFromDir = probalib();
  return [doc, req];
}",
    },
    "validate_doc_update": "function (newDoc, oldDoc, userCtx, secObj) {
  if (newDoc._deleted === true) {
    // allow deletes by admins and matching users
    // without checking the other fields
    if (userCtx.roles.indexOf('_admin') !== -1 || userCtx.name == oldDoc.name) {
      return;
    } else {
      throw {
        forbidden: 'Only admins may delete other user docs.'
      };
    }
  }
}",
    "views": Object {
      "byBuiltin": Object {
        "map": "function (doc) {
  var date = new Date(doc.date);
  emit([date.getFullYear(), date.getMonth(), date.getDay(), date.getHours()], doc.value);
}",
        "reduce": "_sum",
      },
      "byDate": Object {
        "map": "function (doc) {
  if (doc.type === 'post' && doc.tags && Array.isArray(doc.tags)) {
    doc.tags.forEach(function (tag) {
      emit(tag.toLowerCase(), 1);
    });
  }
}",
        "reduce": "function (keys, values, rereduce) {
  var lib = require('lib/couchdb');

  if (rereduce) {
    return sum(values);
  } else {
    return values.length;
  }
}",
      },
      "byName": Object {
        "map": "function (doc) {
  log('log from views/byName/map');

  if (doc.name) {
    emit(doc.name, 1);
  }
}",
      },
      "byParent": Object {
        "map": "function (doc) {
  log('log from views/byParent/map');

  const myfuncts = function () {
    emit(doc.parent, 1);
  };

  if (doc.parent) {
    myfuncts();
  } else {
    emit('helo', 1);
  }
}",
        "reduce": "function (keys, values, rereduce) {
  return sum(values);
}",
      },
      "byReducer": Object {
        "map": "function (doc) {
  var date = new Date(doc.date);
  emit([date.getFullYear(), date.getMonth(), date.getDay(), date.getHours()], doc.value);
}",
        "reduce": "_count",
      },
      "byTest": Object {
        "map": "function (doc) {
  var date = new Date(doc.date);
  emit([date.getFullYear(), date.getMonth(), date.getDay(), date.getHours()], doc.value);
}",
        "reduce": "_sum",
      },
    },
  },
  Object {
    "_id": "_design/errors",
    "language": "javascript",
    "lib": Object {
      "false": "function map(doc){
    emit(doc._id,false);
}

module.exports = {map}",
    },
    "updates": Object {},
    "views": Object {
      "getrow": Object {
        "map": "function (doc) {
  var row = getRow();
}",
      },
      "lib": "function view(){
    provides('foo','bar');
}

module.exports = {view} ;",
      "provides": Object {
        "map": "function (doc) {
  var lib = require('views/lib');

  lib.view();
}",
      },
      "require": Object {
        "map": "function (doc) {
  var lib = require('lib/false');

  lib.map(doc);
}",
      },
    },
  },
  Object {
    "_id": "_design/mango",
    "language": "query",
    "options": Object {
      "partitioned": false,
    },
    "views": Object {
      "mongo": Object {
        "map": Object {
          "fields": Object {
            "_id": "asc",
            "_rev": "asc",
            "title": "asc",
            "year": "asc",
          },
          "partial_filter_selector": Object {
            "$and": Array [
              Object {
                "year": Object {
                  "$gt": 2010,
                },
              },
              Object {
                "limit": Object {
                  "$eq": 10,
                },
              },
              Object {
                "skip": Object {
                  "$eq": 0,
                },
              },
            ],
          },
        },
        "options": Object {
          "def": Object {
            "fields": Array [
              "_id",
              Object {
                "_rev": "asc",
              },
              "year",
              "title",
            ],
            "partial_filter_selector": Object {
              "limit": 10,
              "skip": 0,
              "year": Object {
                "$gt": 2010,
              },
            },
          },
        },
        "reduce": "_count",
      },
    },
  },
  Object {
    "_id": "_design/querys",
    "language": "query",
    "views": Object {
      "bar-index": Object {
        "map": Object {
          "fields": Object {
            "bar": "asc",
          },
          "partial_filter_selector": Object {},
        },
        "options": Object {
          "def": Object {
            "fields": Array [
              "bar",
            ],
          },
        },
        "reduce": "_count",
      },
      "foo-index": Object {
        "map": Object {
          "fields": Object {
            "foo": "asc",
          },
          "partial_filter_selector": Object {},
        },
        "options": Object {
          "def": Object {
            "fields": Array [
              "foo",
            ],
          },
        },
        "reduce": "_sum",
      },
    },
  },
]
`;
